{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"react fc with ts": {
		"prefix": "fc",
		"body": [
			"import React from 'react';",
			"",
			"interface I${TM_FILENAME/(.*)\\..+$/$1/} {}",
			"",
			"const ${TM_FILENAME/(.*)\\..+$/$1/}: React.FC<I${TM_FILENAME/(.*)\\..+$/$1/}> = ({}) => {",
			"  ",
			" return (",
			"   null",
			" );",
			"}",
			"export default ${TM_FILENAME/(.*)\\..+$/$1/};"
		],
		"description": "Function component in React using typescript"
	},
	"new test spec": {
		"prefix": "test",
		"body": [
			"describe('[unit of work]', () => {",
			"  describe('[scenario/context - function description]', () => {",
			"   it('should [expected behavior]', () => {",
			"   });",
			"  });",
			"});",
		],
		"description": "Test description with the proper placeholders."
	}
}
